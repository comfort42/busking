{"version":3,"sources":["OvVideo.js","UserVideoComponent.js","App.js","registerServiceWorker.js","index.js"],"names":["OpenViduVideoComponent","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","videoRef","React","createRef","_createClass","key","value","this","streamManager","addVideoElement","current","_jsx","autoPlay","ref","Component","UserVideoComponent","apply","arguments","JSON","parse","stream","connection","data","clientData","children","undefined","_jsxs","className","getNicknameTag","APPLICATION_SERVER_URL","App","state","mySessionId","myUserName","Math","floor","random","session","mainStreamManager","publisher","subscribers","joinSession","bind","_assertThisInitialized","leaveSession","switchCamera","handleChangeSessionId","handleChangeUserName","handleMainVideoStream","onbeforeunload","window","addEventListener","removeEventListener","event","e","setState","target","index","indexOf","splice","_this2","OV","OpenVidu","initSession","mySession","on","subscriber","subscribe","push","deleteSubscriber","exception","console","warn","getToken","then","token","connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","devices","videoDevices","currentVideoDeviceId","currentVideoDevice","wrap","_context","prev","next","initPublisherAsync","audioSource","videoSource","publishAudio","publishVideo","resolution","frameRate","insertMode","mirror","sent","publish","getDevices","filter","device","kind","getMediaStream","getVideoTracks","getSettings","deviceId","find","stop","catch","error","log","code","message","disconnect","_switchCamera","_callee2","newVideoDevice","newPublisher","_this3","_context2","length","initPublisher","unpublish","t0","_this4","id","src","alt","onSubmit","type","onChange","required","name","onClick","map","sub","i","_getToken","_callee3","sessionId","_context3","createSession","createToken","abrupt","_createSession","_callee4","response","_context4","axios","post","customSessionId","headers","_x","_createToken","_callee5","_context5","_x2","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","concat","fetch","status","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.94a1934b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class OpenViduVideoComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.videoRef = React.createRef();\n    }\n\n    componentDidUpdate(props) {\n        if (props && !!this.videoRef) {\n            this.props.streamManager.addVideoElement(this.videoRef.current);\n        }\n    }\n\n    componentDidMount() {\n        if (this.props && !!this.videoRef) {\n            this.props.streamManager.addVideoElement(this.videoRef.current);\n        }\n    }\n\n    render() {\n        return <video autoPlay={true} ref={this.videoRef} />;\n    }\n\n}\n","import React, { Component } from 'react';\nimport OpenViduVideoComponent from './OvVideo';\nimport './UserVideo.css';\n\nexport default class UserVideoComponent extends Component {\n\n    getNicknameTag() {\n        // Gets the nickName of the user\n        return JSON.parse(this.props.streamManager.stream.connection.data).clientData;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.streamManager !== undefined ? (\n                    <div className=\"streamcomponent\">\n                        <OpenViduVideoComponent streamManager={this.props.streamManager} />\n                        <div><p>{this.getNicknameTag()}</p></div>\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n}\n","import { OpenVidu } from 'openvidu-browser';\n\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport './App.css';\nimport UserVideoComponent from './UserVideoComponent';\n\nconst APPLICATION_SERVER_URL = 'https://i9c108.p.ssafy.io/';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        // These properties are in the state's component in order to re-render the HTML whenever their values change\n        this.state = {\n            mySessionId: 'ssafy_1',\n            myUserName: 'Participant' + Math.floor(Math.random() * 100),\n            session: undefined,\n            mainStreamManager: undefined,  // Main video of the page. Will be the 'publisher' or one of the 'subscribers'\n            publisher: undefined,\n            subscribers: [],\n        };\n\n        this.joinSession = this.joinSession.bind(this);\n        this.leaveSession = this.leaveSession.bind(this);\n        this.switchCamera = this.switchCamera.bind(this);\n        this.handleChangeSessionId = this.handleChangeSessionId.bind(this);\n        this.handleChangeUserName = this.handleChangeUserName.bind(this);\n        this.handleMainVideoStream = this.handleMainVideoStream.bind(this);\n        this.onbeforeunload = this.onbeforeunload.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener('beforeunload', this.onbeforeunload);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this.onbeforeunload);\n    }\n\n    onbeforeunload(event) {\n        this.leaveSession();\n    }\n\n    handleChangeSessionId(e) {\n        this.setState({\n            mySessionId: e.target.value,\n        });\n    }\n\n    handleChangeUserName(e) {\n        this.setState({\n            myUserName: e.target.value,\n        });\n    }\n\n    handleMainVideoStream(stream) {\n        if (this.state.mainStreamManager !== stream) {\n            this.setState({\n                mainStreamManager: stream\n            });\n        }\n    }\n\n    deleteSubscriber(streamManager) {\n        let subscribers = this.state.subscribers;\n        let index = subscribers.indexOf(streamManager, 0);\n        if (index > -1) {\n            subscribers.splice(index, 1);\n            this.setState({\n                subscribers: subscribers,\n            });\n        }\n    }\n\n    joinSession() {\n        // --- 1) Get an OpenVidu object ---\n\n        this.OV = new OpenVidu();\n\n        // --- 2) Init a session ---\n\n        this.setState(\n            {\n                session: this.OV.initSession(),\n            },\n            () => {\n                var mySession = this.state.session;\n\n                // --- 3) Specify the actions when events take place in the session ---\n\n                // On every new Stream received...\n                mySession.on('streamCreated', (event) => {\n                    // Subscribe to the Stream to receive it. Second parameter is undefined\n                    // so OpenVidu doesn't create an HTML video by its own\n                    var subscriber = mySession.subscribe(event.stream, undefined);\n                    var subscribers = this.state.subscribers;\n                    subscribers.push(subscriber);\n\n                    // Update the state with the new subscribers\n                    this.setState({\n                        subscribers: subscribers,\n                    });\n                });\n\n                // On every Stream destroyed...\n                mySession.on('streamDestroyed', (event) => {\n\n                    // Remove the stream from 'subscribers' array\n                    this.deleteSubscriber(event.stream.streamManager);\n                });\n\n                // On every asynchronous exception...\n                mySession.on('exception', (exception) => {\n                    console.warn(exception);\n                });\n\n                // --- 4) Connect to the session with a valid user token ---\n\n                // Get a token from the OpenVidu deployment\n                this.getToken().then((token) => {\n                    // First param is the token got from the OpenVidu deployment. Second param can be retrieved by every user on event\n                    // 'streamCreated' (property Stream.connection.data), and will be appended to DOM as the user's nickname\n                    mySession.connect(token, { clientData: this.state.myUserName })\n                        .then(async () => {\n\n                            // --- 5) Get your own camera stream ---\n\n                            // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video\n                            // element: we will manage it on our own) and with the desired properties\n                            let publisher = await this.OV.initPublisherAsync(undefined, {\n                                audioSource: undefined, // The source of audio. If undefined default microphone\n                                videoSource: undefined, // The source of video. If undefined default webcam\n                                publishAudio: true, // Whether you want to start publishing with your audio unmuted or not\n                                publishVideo: true, // Whether you want to start publishing with your video enabled or not\n                                resolution: '640x480', // The resolution of your video\n                                frameRate: 30, // The frame rate of your video\n                                insertMode: 'APPEND', // How the video is inserted in the target element 'video-container'\n                                mirror: false, // Whether to mirror your local video or not\n                            });\n\n                            // --- 6) Publish your stream ---\n\n                            mySession.publish(publisher);\n\n                            // Obtain the current video device in use\n                            var devices = await this.OV.getDevices();\n                            var videoDevices = devices.filter(device => device.kind === 'videoinput');\n                            var currentVideoDeviceId = publisher.stream.getMediaStream().getVideoTracks()[0].getSettings().deviceId;\n                            var currentVideoDevice = videoDevices.find(device => device.deviceId === currentVideoDeviceId);\n\n                            // Set the main video in the page to display our webcam and store our Publisher\n                            this.setState({\n                                currentVideoDevice: currentVideoDevice,\n                                mainStreamManager: publisher,\n                                publisher: publisher,\n                            });\n                        })\n                        .catch((error) => {\n                            console.log('There was an error connecting to the session:', error.code, error.message);\n                        });\n                });\n            },\n        );\n    }\n\n    leaveSession() {\n\n        // --- 7) Leave the session by calling 'disconnect' method over the Session object ---\n\n        const mySession = this.state.session;\n\n        if (mySession) {\n            mySession.disconnect();\n        }\n\n        // Empty all properties...\n        this.OV = null;\n        this.setState({\n            session: undefined,\n            subscribers: [],\n            mySessionId: 'SessionA',\n            myUserName: 'Participant' + Math.floor(Math.random() * 100),\n            mainStreamManager: undefined,\n            publisher: undefined\n        });\n    }\n\n    async switchCamera() {\n        try {\n            const devices = await this.OV.getDevices()\n            var videoDevices = devices.filter(device => device.kind === 'videoinput');\n\n            if (videoDevices && videoDevices.length > 1) {\n\n                var newVideoDevice = videoDevices.filter(device => device.deviceId !== this.state.currentVideoDevice.deviceId)\n\n                if (newVideoDevice.length > 0) {\n                    // Creating a new publisher with specific videoSource\n                    // In mobile devices the default and first camera is the front one\n                    var newPublisher = this.OV.initPublisher(undefined, {\n                        videoSource: newVideoDevice[0].deviceId,\n                        publishAudio: true,\n                        publishVideo: true,\n                        mirror: true\n                    });\n\n                    //newPublisher.once(\"accessAllowed\", () => {\n                    await this.state.session.unpublish(this.state.mainStreamManager)\n\n                    await this.state.session.publish(newPublisher)\n                    this.setState({\n                        currentVideoDevice: newVideoDevice[0],\n                        mainStreamManager: newPublisher,\n                        publisher: newPublisher,\n                    });\n                }\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    render() {\n        const mySessionId = this.state.mySessionId;\n        const myUserName = this.state.myUserName;\n\n        return (\n            <div className=\"container\">\n                {this.state.session === undefined ? (\n                    <div id=\"join\">\n                        <div id=\"img-div\">\n                            <img src=\"resources/images/openvidu_grey_bg_transp_cropped.png\" alt=\"OpenVidu logo\" />\n                        </div>\n                        <div id=\"join-dialog\" className=\"jumbotron vertical-center\">\n                            <h1> Join a video session </h1>\n                            <form className=\"form-group\" onSubmit={this.joinSession}>\n                                <p>\n                                    <label>Participant: </label>\n                                    <input\n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        id=\"userName\"\n                                        value={myUserName}\n                                        onChange={this.handleChangeUserName}\n                                        required\n                                    />\n                                </p>\n                                <p>\n                                    <label> Session: </label>\n                                    <input\n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        id=\"sessionId\"\n                                        value={mySessionId}\n                                        onChange={this.handleChangeSessionId}\n                                        required\n                                    />\n                                </p>\n                                <p className=\"text-center\">\n                                    <input className=\"btn btn-lg btn-success\" name=\"commit\" type=\"submit\" value=\"JOIN\" />\n                                </p>\n                            </form>\n                        </div>\n                    </div>\n                ) : null}\n\n                {this.state.session !== undefined ? (\n                    <div id=\"session\">\n                        <div id=\"session-header\">\n                            <h1 id=\"session-title\">{mySessionId}</h1>\n                            <input\n                                className=\"btn btn-large btn-danger\"\n                                type=\"button\"\n                                id=\"buttonLeaveSession\"\n                                onClick={this.leaveSession}\n                                value=\"Leave session\"\n                            />\n                            <input\n                                className=\"btn btn-large btn-success\"\n                                type=\"button\"\n                                id=\"buttonSwitchCamera\"\n                                onClick={this.switchCamera}\n                                value=\"Switch Camera\"\n                            />\n                        </div>\n\n                        {this.state.mainStreamManager !== undefined ? (\n                            <div id=\"main-video\" className=\"col-md-6\">\n                                <UserVideoComponent streamManager={this.state.mainStreamManager} />\n\n                            </div>\n                        ) : null}\n                        <div id=\"video-container\" className=\"col-md-6\">\n                            {this.state.publisher !== undefined ? (\n                                <div className=\"stream-container col-md-6 col-xs-6\" onClick={() => this.handleMainVideoStream(this.state.publisher)}>\n                                    <UserVideoComponent\n                                        streamManager={this.state.publisher} />\n                                </div>\n                            ) : null}\n                            {this.state.subscribers.map((sub, i) => (\n                                <div key={sub.id} className=\"stream-container col-md-6 col-xs-6\" onClick={() => this.handleMainVideoStream(sub)}>\n                                    <span>{sub.id}</span>\n                                    <UserVideoComponent streamManager={sub} />\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n\n\n    /**\n     * --------------------------------------------\n     * GETTING A TOKEN FROM YOUR APPLICATION SERVER\n     * --------------------------------------------\n     * The methods below request the creation of a Session and a Token to\n     * your application server. This keeps your OpenVidu deployment secure.\n     *\n     * In this sample code, there is no user control at all. Anybody could\n     * access your application server endpoints! In a real production\n     * environment, your application server must identify the user to allow\n     * access to the endpoints.\n     *\n     * Visit https://docs.openvidu.io/en/stable/application-server to learn\n     * more about the integration of OpenVidu in your application server.\n     */\n    async getToken() {\n        const sessionId = await this.createSession(this.state.mySessionId);\n        return await this.createToken(sessionId);\n    }\n\n    async createSession(sessionId) {\n        const response = await axios.post(APPLICATION_SERVER_URL + 'api/sessions', { customSessionId: sessionId }, {\n            headers: { 'Content-Type': 'application/json', 'Authorization': 'Basic T1BFTlZJRFVBUFA6b3BlbnZpZHVfc3NhZnlfYXdz'},\n        });\n        return response.data; // The sessionId\n    }\n\n    async createToken(sessionId) {\n        const response = await axios.post(APPLICATION_SERVER_URL + 'api/sessions/' + sessionId + '/connections', {}, {\n            headers: { 'Content-Type': 'application/json', 'Authorization': 'Basic T1BFTlZJRFVBUFA6b3BlbnZpZHVfc3NhZnlfYXdz'},\n        });\n        return response.data; // The token\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}