{"version":3,"sources":["OvVideo.js","UserVideoComponent.js","App.js","registerServiceWorker.js","index.js"],"names":["OpenViduVideoComponent","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","videoRef","React","createRef","_createClass","key","value","this","streamManager","addVideoElement","current","_jsx","autoPlay","ref","Component","UserVideoComponent","apply","arguments","JSON","parse","stream","connection","data","clientData","children","undefined","_jsxs","className","getNicknameTag","APPLICATION_SERVER_URL","App","state","mySessionId","myUserName","Math","floor","random","session","mainStreamManager","publisher","subscribers","joinSession","bind","_assertThisInitialized","leaveSession","switchCamera","handleChangeSessionId","handleChangeUserName","handleMainVideoStream","onbeforeunload","window","addEventListener","removeEventListener","event","e","setState","target","index","indexOf","splice","_this2","OV","OpenVidu","initSession","mySession","on","subscriber","subscribe","push","deleteSubscriber","exception","console","warn","getToken","then","token","connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","devices","videoDevices","currentVideoDeviceId","currentVideoDevice","wrap","_context","prev","next","initPublisherAsync","audioSource","videoSource","publishAudio","publishVideo","resolution","frameRate","insertMode","mirror","sent","publish","getDevices","filter","device","kind","getMediaStream","getVideoTracks","getSettings","deviceId","find","stop","catch","error","log","code","message","disconnect","_switchCamera","_callee2","newVideoDevice","newPublisher","_this3","_context2","length","initPublisher","unpublish","t0","_this4","id","src","alt","onSubmit","type","onChange","required","name","onClick","map","sub","i","_getToken","_callee3","sessionId","_context3","createSession","createToken","abrupt","_createSession","_callee4","response","_context4","axios","post","customSessionId","headers","_x","_createToken","_callee5","_context5","_x2","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","concat","fetch","status","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.73106a2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class OpenViduVideoComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.videoRef = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate(props) {\r\n        if (props && !!this.videoRef) {\r\n            this.props.streamManager.addVideoElement(this.videoRef.current);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props && !!this.videoRef) {\r\n            this.props.streamManager.addVideoElement(this.videoRef.current);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <video autoPlay={true} ref={this.videoRef} />;\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport OpenViduVideoComponent from './OvVideo';\r\nimport './UserVideo.css';\r\n\r\nexport default class UserVideoComponent extends Component {\r\n\r\n    getNicknameTag() {\r\n        // Gets the nickName of the user\r\n        return JSON.parse(this.props.streamManager.stream.connection.data).clientData;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.streamManager !== undefined ? (\r\n                    <div className=\"streamcomponent\">\r\n                        <OpenViduVideoComponent streamManager={this.props.streamManager} />\r\n                        <div><p>{this.getNicknameTag()}</p></div>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { OpenVidu } from \"openvidu-browser\";\r\n\r\nimport axios from \"axios\";\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport UserVideoComponent from \"./UserVideoComponent\";\r\n\r\nconst APPLICATION_SERVER_URL = \"https://i9c108.p.ssafy.io/\";\r\n// process.env.NODE_ENV === \"production\" ? \"\" : \"https://demos.openvidu.io/\";\r\n\r\n// const APPLICATION_SERVER_URL =\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // These properties are in the state's component in order to re-render the HTML whenever their values change\r\n    this.state = {\r\n      mySessionId: \"ssafy_1\",\r\n      //   myUserName: Math.floor(Math.random() * 50) + \"번째 러지\",\r\n      myUserName: \"SSAFY \" + Math.floor(Math.random() * 50),\r\n      session: undefined,\r\n      mainStreamManager: undefined, // Main video of the page. Will be the 'publisher' or one of the 'subscribers'\r\n      publisher: undefined,\r\n      subscribers: [],\r\n    };\r\n\r\n    this.joinSession = this.joinSession.bind(this);\r\n    this.leaveSession = this.leaveSession.bind(this);\r\n    this.switchCamera = this.switchCamera.bind(this);\r\n    this.handleChangeSessionId = this.handleChangeSessionId.bind(this);\r\n    this.handleChangeUserName = this.handleChangeUserName.bind(this);\r\n    this.handleMainVideoStream = this.handleMainVideoStream.bind(this);\r\n    this.onbeforeunload = this.onbeforeunload.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"beforeunload\", this.onbeforeunload);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"beforeunload\", this.onbeforeunload);\r\n  }\r\n\r\n  onbeforeunload(event) {\r\n    this.leaveSession();\r\n  }\r\n\r\n  handleChangeSessionId(e) {\r\n    this.setState({\r\n      mySessionId: e.target.value,\r\n    });\r\n  }\r\n\r\n  handleChangeUserName(e) {\r\n    this.setState({\r\n      myUserName: e.target.value,\r\n    });\r\n  }\r\n\r\n  handleMainVideoStream(stream) {\r\n    if (this.state.mainStreamManager !== stream) {\r\n      this.setState({\r\n        mainStreamManager: stream,\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteSubscriber(streamManager) {\r\n    let subscribers = this.state.subscribers;\r\n    let index = subscribers.indexOf(streamManager, 0);\r\n    if (index > -1) {\r\n      subscribers.splice(index, 1);\r\n      this.setState({\r\n        subscribers: subscribers,\r\n      });\r\n    }\r\n  }\r\n\r\n  joinSession() {\r\n    // --- 1) Get an OpenVidu object ---\r\n\r\n    this.OV = new OpenVidu();\r\n\r\n    // --- 2) Init a session ---\r\n\r\n    this.setState(\r\n      {\r\n        session: this.OV.initSession(),\r\n      },\r\n      () => {\r\n        var mySession = this.state.session;\r\n\r\n        // --- 3) Specify the actions when events take place in the session ---\r\n\r\n        // On every new Stream received...\r\n        mySession.on(\"streamCreated\", (event) => {\r\n          // Subscribe to the Stream to receive it. Second parameter is undefined\r\n          // so OpenVidu doesn't create an HTML video by its own\r\n          var subscriber = mySession.subscribe(event.stream, undefined);\r\n          var subscribers = this.state.subscribers;\r\n          subscribers.push(subscriber);\r\n\r\n          // Update the state with the new subscribers\r\n          this.setState({\r\n            subscribers: subscribers,\r\n          });\r\n        });\r\n\r\n        // On every Stream destroyed...\r\n        mySession.on(\"streamDestroyed\", (event) => {\r\n          // Remove the stream from 'subscribers' array\r\n          this.deleteSubscriber(event.stream.streamManager);\r\n        });\r\n\r\n        // On every asynchronous exception...\r\n        mySession.on(\"exception\", (exception) => {\r\n          console.warn(exception);\r\n        });\r\n\r\n        // --- 4) Connect to the session with a valid user token ---\r\n\r\n        // Get a token from the OpenVidu deployment\r\n        this.getToken().then((token) => {\r\n          // First param is the token got from the OpenVidu deployment. Second param can be retrieved by every user on event\r\n          // 'streamCreated' (property Stream.connection.data), and will be appended to DOM as the user's nickname\r\n          mySession\r\n            .connect(token, { clientData: this.state.myUserName })\r\n            .then(async () => {\r\n              // --- 5) Get your own camera stream ---\r\n\r\n              // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video\r\n              // element: we will manage it on our own) and with the desired properties\r\n              let publisher = await this.OV.initPublisherAsync(undefined, {\r\n                audioSource: undefined, // The source of audio. If undefined default microphone\r\n                videoSource: undefined, // The source of video. If undefined default webcam\r\n                publishAudio: true, // Whether you want to start publishing with your audio unmuted or not\r\n                publishVideo: true, // Whether you want to start publishing with your video enabled or not\r\n                resolution: \"640x480\", // The resolution of your video\r\n                frameRate: 30, // The frame rate of your video\r\n                insertMode: \"APPEND\", // How the video is inserted in the target element 'video-container'\r\n                mirror: true, // Whether to mirror your local video or not\r\n              });\r\n\r\n              // --- 6) Publish your stream ---\r\n\r\n              mySession.publish(publisher);\r\n\r\n              // Obtain the current video device in use\r\n              var devices = await this.OV.getDevices();\r\n              var videoDevices = devices.filter(\r\n                (device) => device.kind === \"videoinput\"\r\n              );\r\n              var currentVideoDeviceId = publisher.stream\r\n                .getMediaStream()\r\n                .getVideoTracks()[0]\r\n                .getSettings().deviceId;\r\n              var currentVideoDevice = videoDevices.find(\r\n                (device) => device.deviceId === currentVideoDeviceId\r\n              );\r\n\r\n              // Set the main video in the page to display our webcam and store our Publisher\r\n              this.setState({\r\n                currentVideoDevice: currentVideoDevice,\r\n                mainStreamManager: publisher,\r\n                publisher: publisher,\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              console.log(\r\n                \"There was an error connecting to the session:\",\r\n                error.code,\r\n                error.message\r\n              );\r\n            });\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  leaveSession() {\r\n    // --- 7) Leave the session by calling 'disconnect' method over the Session object ---\r\n\r\n    const mySession = this.state.session;\r\n\r\n    if (mySession) {\r\n      mySession.disconnect();\r\n    }\r\n\r\n    // Empty all properties...\r\n    this.OV = null;\r\n    this.setState({\r\n      session: undefined,\r\n      subscribers: [],\r\n      mySessionId: \"SessionA\",\r\n      myUserName: \"Participant\" + Math.floor(Math.random() * 100),\r\n      mainStreamManager: undefined,\r\n      publisher: undefined,\r\n    });\r\n  }\r\n\r\n  async switchCamera() {\r\n    try {\r\n      const devices = await this.OV.getDevices();\r\n      var videoDevices = devices.filter(\r\n        (device) => device.kind === \"videoinput\"\r\n      );\r\n\r\n      if (videoDevices && videoDevices.length > 1) {\r\n        var newVideoDevice = videoDevices.filter(\r\n          (device) => device.deviceId !== this.state.currentVideoDevice.deviceId\r\n        );\r\n\r\n        if (newVideoDevice.length > 0) {\r\n          // Creating a new publisher with specific videoSource\r\n          // In mobile devices the default and first camera is the front one\r\n          var newPublisher = this.OV.initPublisher(undefined, {\r\n            videoSource: newVideoDevice[0].deviceId,\r\n            publishAudio: true,\r\n            publishVideo: true,\r\n            mirror: true,\r\n          });\r\n\r\n          //newPublisher.once(\"accessAllowed\", () => {\r\n          await this.state.session.unpublish(this.state.mainStreamManager);\r\n\r\n          await this.state.session.publish(newPublisher);\r\n          this.setState({\r\n            currentVideoDevice: newVideoDevice[0],\r\n            mainStreamManager: newPublisher,\r\n            publisher: newPublisher,\r\n          });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const mySessionId = this.state.mySessionId;\r\n    const myUserName = this.state.myUserName;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        {this.state.session === undefined ? (\r\n          <div id=\"join\">\r\n            <div id=\"img-div\">\r\n              <img src=\"resources/images/ssabus.png\" alt=\"OpenVidu logo\" />\r\n            </div>\r\n            <div id=\"join-dialog\" className=\"jumbotron vertical-center\">\r\n              <h1> 대성이와 러지들 </h1>\r\n              <h3 className=\"subTitle\"> 못난놈들은 서로 얼굴만 봐도 흥겹다.</h3>\r\n\r\n              <form className=\"form-group\" onSubmit={this.joinSession}>\r\n                <p>\r\n                  <label>닉네임을 입력하세요 </label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    id=\"userName\"\r\n                    value={myUserName}\r\n                    onChange={this.handleChangeUserName}\r\n                    required\r\n                  />\r\n                </p>\r\n                <p>\r\n                  <label> 접속할 세션을 입력하세요 </label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    id=\"sessionId\"\r\n                    value={mySessionId}\r\n                    onChange={this.handleChangeSessionId}\r\n                    required\r\n                  />\r\n                </p>\r\n                <p className=\"text-center\">\r\n                  <input\r\n                    className=\"btn btn-lg btn-success\"\r\n                    name=\"commit\"\r\n                    type=\"submit\"\r\n                    value=\"입장하기\"\r\n                  />\r\n                </p>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n\r\n        {this.state.session !== undefined ? (\r\n          <div id=\"session\">\r\n            <div id=\"session-header\">\r\n              <h1 id=\"session-title\">C108 : 편안한42</h1>\r\n              <input\r\n                className=\"btn btn-large btn-danger\"\r\n                type=\"button\"\r\n                id=\"buttonLeaveSession\"\r\n                onClick={this.leaveSession}\r\n                value=\"빨간색 버튼\"\r\n              />\r\n              <input\r\n                className=\"btn btn-large btn-success\"\r\n                type=\"button\"\r\n                id=\"buttonSwitchCamera\"\r\n                onClick={this.switchCamera}\r\n                value=\"초록색 버튼\"\r\n              />\r\n            </div>\r\n\r\n            {this.state.mainStreamManager !== undefined ? (\r\n              <div id=\"main-video\" className=\"col-md-6\">\r\n                <UserVideoComponent\r\n                  streamManager={this.state.mainStreamManager}\r\n                />\r\n              </div>\r\n            ) : null}\r\n            <div id=\"video-container\" className=\"col-md-6\">\r\n              {this.state.publisher !== undefined ? (\r\n                <div\r\n                  className=\"stream-container col-md-6 col-xs-6\"\r\n                  onClick={() =>\r\n                    this.handleMainVideoStream(this.state.publisher)\r\n                  }\r\n                >\r\n                  <UserVideoComponent streamManager={this.state.publisher} />\r\n                </div>\r\n              ) : null}\r\n              {this.state.subscribers.map((sub, i) => (\r\n                <div\r\n                  key={sub.id}\r\n                  className=\"stream-container col-md-6 col-xs-6\"\r\n                  onClick={() => this.handleMainVideoStream(sub)}\r\n                >\r\n                  <span>{sub.id}</span>\r\n                  <UserVideoComponent streamManager={sub} />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * --------------------------------------------\r\n   * GETTING A TOKEN FROM YOUR APPLICATION SERVER\r\n   * --------------------------------------------\r\n   * The methods below request the creation of a Session and a Token to\r\n   * your application server. This keeps your OpenVidu deployment secure.\r\n   *\r\n   * In this sample code, there is no user control at all. Anybody could\r\n   * access your application server endpoints! In a real production\r\n   * environment, your application server must identify the user to allow\r\n   * access to the endpoints.\r\n   *\r\n   * Visit https://docs.openvidu.io/en/stable/application-server to learn\r\n   * more about the integration of OpenVidu in your application server.\r\n   */\r\n  async getToken() {\r\n    const sessionId = await this.createSession(this.state.mySessionId);\r\n    return await this.createToken(sessionId);\r\n  }\r\n\r\n  async createSession(sessionId) {\r\n    const response = await axios.post(\r\n      APPLICATION_SERVER_URL + \"api/sessions\",\r\n      { customSessionId: sessionId },\r\n      {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      }\r\n    );\r\n    return response.data; // The sessionId\r\n  }\r\n\r\n  async createToken(sessionId) {\r\n    const response = await axios.post(\r\n      APPLICATION_SERVER_URL + \"api/sessions/\" + sessionId + \"/connections\",\r\n      {},\r\n      {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      }\r\n    );\r\n    return response.data; // The token\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}